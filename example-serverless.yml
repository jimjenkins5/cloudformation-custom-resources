service: cloudformation-custom-resources

frameworkVersion: 1.26.1

custom:
   defaultRegion: us-east-1
   region: ${opt:region, self:custom.defaultRegion}
   stage: ${opt:stage, env:USER}
   objectPrefix: '${self:service}-${self:custom.stage}'

package:
   exclude:
      - 'tests/**'

provider:
   name: aws
   runtime: nodejs6.10
   stackTags: # NOTE: STAGE is automatically added by SLS
      CODE_VERSION: ${file(./node_modules/silvermine-serverless-utils/src/get-code-version.js):both}
      SLS_SVC_NAME: ${self:service}
   region: ${self:custom.region}
   stage: ${self:custom.stage}
   environment:
      CODE_VERSION: ${file(./node_modules/silvermine-serverless-utils/src/get-code-version.js):both}
      SLS_SVC_NAME: ${self:service}
      SLS_STAGE: ${self:custom.stage}
   iamRoleStatements:
      # Permissions needed for various services:
      # We know that APIGatewayDomainName requires this, and likely other resources do as
      # well. See
      # https://aws.amazon.com/blogs/security/introducing-an-easier-way-to-delegate-permissions-to-aws-services-service-linked-roles/
      -
         Effect: 'Allow'
         Action:
            - 'iam:CreateServiceLinkedRole'
         Resource:
            - '*'
      # Permissions needed for SNSSQSSubscription:
      -
         Effect: 'Allow'
         Action:
            - 'sns:Subscribe'
            - 'sns:Unsubscribe'
         Resource:
            - '*'
      # Permissions needed for CloudFrontOriginAccessIdentity:
      -
         Effect: 'Allow'
         Action:
            - 'cloudfront:CreateCloudFrontOriginAccessIdentity'
            - 'cloudfront:DeleteCloudFrontOriginAccessIdentity'
            - 'cloudfront:GetCloudFrontOriginAccessIdentity'
            - 'cloudfront:GetCloudFrontOriginAccessIdentityConfig'
            - 'cloudfront:ListCloudFrontOriginAccessIdentities'
            - 'cloudfront:UpdateCloudFrontOriginAccessIdentity'
         Resource:
            - '*'
      # Permissions needed for DynamoDBGlobalTable:
      -
         Effect: 'Allow'
         Action:
            - 'dynamodb:DescribeTable'
            - 'dynamodb:DescribeGlobalTable'
            - 'dynamodb:CreateTable'
            - 'dynamodb:CreateGlobalTable'
            - 'dynamodb:UpdateTable'
            - 'dynamodb:UpdateGlobalTable'
            - 'dynamodb:DeleteTable'
            - 'dynamodb:ListTagsOfResource'
            - 'dynamodb:TagResource'
         Resource:
            - '*'
      # Permissions needed for SimpleEmailServiceDomainVerification:
      -
         Effect: 'Allow'
         Action:
            - 'ses:VerifyDomainIdentity'
            - 'ses:DeleteIdentity'
         Resource:
            - '*'
      # Permissions needed for SimpleEmailServiceRuleSetActivation:
      -
         Effect: 'Allow'
         Action:
            - 'ses:SetActiveReceiptRuleSet'
         Resource:
            - '*'
      # Permissions needed for APIGatewayDomainName:
      -
         Effect: 'Allow'
         Action:
            - 'apigateway:*'
         Resource:
            - '*'
      # Permissions needed for KMSKeyGrant:
      # NOTE: these permissions will make your custom-resources Lambda have a lot of
      # power; the Lambda function will be able to grant itself (or anyone running it)
      # access to encrypt or decrypt data with any key in your account. You may need to
      # impose further restrictions on this policy, restrict access to the custom-resource
      # Lambda, etc.
      -
         Effect: 'Allow'
         Action:
            - 'kms:CreateGrant'
            - 'kms:RevokeGrant'
         Resource:
            - '*'

functions:
   customResources:
      name: ${self:custom.objectPrefix}
      handler: src/CustomResourceHandler.handler
      memorySize: 256
      timeout: 300
